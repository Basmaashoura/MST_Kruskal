# MAX-HEAPIFY Algorithm
def max_heapify(A, n, i):
    largest = i
    left = 2 * i + 1
    right = 2 * i + 2
    
    if left < n and A[left] > A[largest]:
        largest = left
    if right < n and A[right] > A[largest]:
        largest = right
        
    if largest != i:
        A[i], A[largest] = A[largest], A[i]
        max_heapify(A, n, largest)
​
# BUILD-MAX-HEAP Algorithm
def build_max_heap(A):
    n = len(A)
    for i in range(n//2 - 1, -1, -1):
        max_heapify(A, n, i)
​
# HEAPSORT Algorithm
def heapsort(A):
    n = len(A)
    build_max_heap(A)
    for i in range(n-1, 0, -1):
        A[0], A[i] = A[i], A[0]
        max_heapify(A, i, 0)

''' 
Algorithm Analysis:
1. MAX-HEAPIFY Analysis:
- Time complexity: O(log n) - height of heap
- Space complexity: O(log n) - due to recursion stack

2. BUILD-MAX-HEAP Analysis:
- Calls MAX-HEAPIFY n/2 times
- Time complexity: O(n) - tighter bound due to decreasing height at each level
- Space complexity: O(1)

3. HEAPSORT Analysis:
- Time complexity: O(n log n) - builds heap + n-1 extract max operations
- Space complexity: O(1) - in-place sorting
'''
